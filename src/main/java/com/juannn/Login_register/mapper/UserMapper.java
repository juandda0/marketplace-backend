package com.juannn.Login_register.mapper;

import com.juannn.Login_register.dto.auth.request.RegisterRequest;
import com.juannn.Login_register.model.user.User;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.ReportingPolicy;

@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface UserMapper {

    /**
     * Converts a registration DTO into a User entity.
     * Fields such as 'id', 'campus', 'roles', and the encoded password
     * are ignored here because they will be handled in the service layer.
     *
     * @param request The DTO containing registration data.
     * @return A User entity with the basic fields mapped.
     */
    @Mapping(target = "id", ignore = true) // ID is generated by the database.
    @Mapping(target = "campus", ignore = true) // The DTO has campusId (Long), but the entity needs a Campus object. This will be handled in the service layer.
    @Mapping(target = "roles", ignore = true) // Roles are assigned as part of business logic.
    @Mapping(target = "isActive", ignore = true) // Default values handled in the entity or service layer.
    @Mapping(target = "isVerified", ignore = true) // Default values handled in the entity or service layer.
    User toDomain(RegisterRequest request);
}
